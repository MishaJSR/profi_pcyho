from aiogram.types import ReplyKeyboardRemove
from aiogram.utils.keyboard import ReplyKeyboardBuilder
import emoji

start_but = ['–ù–∞—á–∞—Ç—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É', '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É']
#main_but = ['–û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å', '–ü–ª–∞–Ω—ã', '–ü—Ä–∏–∑–Ω–∞–∫–∏', '23 –∑–∞–¥–∞–Ω–∏–µ', '25 –∑–∞–¥–∞–Ω–∏–µ']
main_but = ['–û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å']
modules = ['üë®‚Äçüíº –ß–µ–ª–æ–≤–µ–∫ –∏ –æ–±—â–µ—Å—Ç–≤–æ', 'üí∞ –≠–∫–æ–Ω–æ–º–∏–∫–∞', 'üè¢ –ü–æ–ª–∏—Ç–∏–∫–∞', 'üìï –ü—Ä–∞–≤–æ', 'üé≠ –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è',]
#teor = ['–¢–µ–æ—Ä–∏—è', '–ü—Ä–∞–∫—Ç–∏–∫–∞']
teor = ['–ü—Ä–∞–∫—Ç–∏–∫–∞']
sub_var = ['1 –º–µ—Å—è—Ü: 99 —Ä—É–±–ª–µ–π', '3 –º–µ—Å—è—Ü–∞: 249 —Ä—É–±–ª–µ–π', '6 –º–µ—Å—è—Ü–µ–≤: 459 —Ä—É–±–ª–µ–π', '1 –≥–æ–¥: 699 —Ä—É–±–ª–µ–π']
pay_var = ['QR –∫–æ–¥', '–ö–∞—Ä—Ç–∞']


def start_kb(data=None):
    test_kb = ReplyKeyboardBuilder()
    for el in start_but:
        test_kb.button(text=el)
    test_kb.adjust(1, 1)
    return test_kb.as_markup(resize_keyboard=True)


def subj_kb(data=None):
    test_kb = ReplyKeyboardBuilder()
    test_kb.button(text=emoji.emojize(':left_arrow:') + ' –ù–∞–∑–∞–¥')
    for but in main_but:
        test_kb.button(text=but)
    test_kb.adjust(1, 2, 2)
    return test_kb.as_markup(resize_keyboard=True)


def chapters_kb(data=None):
    test_kb = ReplyKeyboardBuilder()

    test_kb.button(text=emoji.emojize(':left_arrow:') + ' –ù–∞–∑–∞–¥')
    for but in data:
        test_kb.button(text=but)
    test_kb.adjust(1, 1)
    return test_kb.as_markup(resize_keyboard=True)


def module_kb(data=None):
    test_kb = ReplyKeyboardBuilder()
    test_kb.button(text=emoji.emojize(':left_arrow:') + ' –ù–∞–∑–∞–¥')
    for el in modules:
        test_kb.button(text=f'{el}')
    test_kb.adjust(1, 1)
    return test_kb.as_markup(resize_keyboard=True)


def under_prepare_kb(data=None):
    test_kb = ReplyKeyboardBuilder()
    test_kb.button(text=emoji.emojize(':left_arrow:') + ' –ù–∞–∑–∞–¥')
    for el in data:
        test_kb.button(text=el)
    test_kb.adjust(1, 1)
    return test_kb.as_markup(resize_keyboard=True)


def prepare_kb(data=None):
    test_kb = ReplyKeyboardBuilder()
    test_kb.button(text=emoji.emojize(':left_arrow:') + ' –ù–∞–∑–∞–¥')
    for but in teor:
        test_kb.button(text=but)
    test_kb.adjust(1, 2)
    return test_kb.as_markup(resize_keyboard=True)


def train_kb(data=None):
    test_kb = ReplyKeyboardBuilder()
    test_kb.button(text=emoji.emojize(':left_arrow:') + ' –ù–∞–∑–∞–¥')
    # test_kb.adjust(1, 2)
    return test_kb.as_markup(resize_keyboard=True)


def next_kb(data=None):
    test_kb = ReplyKeyboardBuilder()
    test_kb.button(text=emoji.emojize(':left_arrow:') + ' –ù–∞–∑–∞–¥')
    test_kb.button(text='–°–ª–µ–¥—É—é—â–∏–π ' + emoji.emojize(':right_arrow:'))
    return test_kb.as_markup(resize_keyboard=True)


def quiz_kb(data_mass=None, sizes: tuple[int] = (1,)):
    test_kb = ReplyKeyboardBuilder()
    test_kb.button(text=emoji.emojize(':left_arrow:') + ' –ù–∞–∑–∞–¥')
    text_des, but_text, answer = data_mass
    butns = but_text.split(", ")
    for ind, el in enumerate(butns):
        test_kb.button(text=f'{el}')
    test_kb.adjust(1, 2)
    return test_kb.as_markup(resize_keyboard=True)


def payment_kb(data=None):
    test_kb = ReplyKeyboardBuilder()
    test_kb.button(text=emoji.emojize(':left_arrow:') + ' –ù–∞–∑–∞–¥')
    for but in sub_var:
        test_kb.button(text=but)
    test_kb.adjust(1, 1)
    return test_kb.as_markup(resize_keyboard=True)

def payment_var_kb(data=None):
    test_kb = ReplyKeyboardBuilder()
    test_kb.button(text=emoji.emojize(':left_arrow:') + ' –ù–∞–∑–∞–¥')
    for but in pay_var:
        test_kb.button(text=but)
    test_kb.adjust(1, 1)
    return test_kb.as_markup(resize_keyboard=True)

del_keyboard = ReplyKeyboardRemove()
