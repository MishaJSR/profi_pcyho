import logging

import emoji
from aiogram.filters import Command, or_f, StateFilter, CommandStart
from aiogram import types, Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from sqlalchemy.ext.asyncio import AsyncSession

from database.orm_query import check_new_user, add_user
from handlers.user.user_task_router import user_task_router, UserTaskState
from handlers.user.payment.user_payment import user_payment_router, UserPaymentState
from keyboards.user.inline_user import get_inline
from keyboards.user.reply_user import start_kb, start_but, subj_kb

user_private_router = Router()
user_private_router.include_routers(user_payment_router, user_task_router)


class UserState(StatesGroup):
    start_user = State()
    payment_user = State()
    user_task = State()
    data = {
        'subj': None,
        'module': None,
        'under_prepare': [],
        'under_prepare_choose': None,
        'prepare': None,
    }


@user_private_router.message(StateFilter('*'), CommandStart())
async def start_cmd(message: types.Message, session: AsyncSession, state: FSMContext):
    try:
        userid, username = message.from_user.id, message.from_user.username
        res = await check_new_user(session, userid)
        if len(res) == 0:
            await add_user(session, userid, username)
    except Exception as e:
        logging.info(e)
        await message.answer('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', reply_markup=start_kb())
    text = f'–ü—Ä–∏–≤–µ—Ç {message.from_user.full_name} ' + emoji.emojize(
        ':cat_with_wry_smile:') + '\n–í —ç—Ç–æ–º –±–æ—Ç–µ —Å–æ–±—Ä–∞–Ω–æ –±–æ–ª–µ–µ 600 –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á –ø–æ –≤—Å–µ–º —Ç–µ–º–∞–º –ï–ì–≠' + '\n–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –∫–Ω–æ–ø–∫–µ –ù–∞—á–∞—Ç—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É'
    await message.answer(text, reply_markup=start_kb())
    await state.set_state(UserState.start_user)
    UserTaskState.last_kb = start_kb()


@user_private_router.message(or_f(UserState.start_user, UserTaskState.start_choose, UserPaymentState.start_choose),
                             F.text)
async def start_subj_choose(message: types.Message, state: FSMContext):
    if message.text not in start_but:
        await message.answer(f'–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞')
        return
    if message.text == '–ù–∞—á–∞—Ç—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É':
        try:
            res = await message.bot.get_chat_member(chat_id='@humanitiessociety', user_id=message.from_user.id)
            if res.status.value not in ['member', 'creator']:
                raise Exception()
            await message.answer(f'–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Å—Ç–∏ \n–ù–æ –º—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π üòä', reply_markup=subj_kb())
            await state.set_state(UserTaskState.subj_choose)
        except:
            await message.answer('–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª', reply_markup=get_inline())
            return
    if message.text == '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É':
        await message.answer(f'–ü—Ä–æ–≤–µ—Ä—è–µ–º ...')
        try:
            res = await message.bot.get_chat_member(chat_id='@humanitiessociety', user_id=message.from_user.id)
            if res.status.value not in ['member', 'creator']:
                raise Exception()
        except:
            await message.answer(f'–ü–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç')
            return
        await message.answer(f'–ü–æ–¥–ø–∏—Å–∫a –µ—Å—Ç—å')


@user_private_router.message(Command('about'))
async def start_about(message: types.Message):
    await message.answer('–≠—Ç–æ –±–æ—Ç –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –ï–ì–≠')
